{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9917039,"sourceType":"datasetVersion","datasetId":6094362},{"sourceId":164570,"sourceType":"modelInstanceVersion","modelInstanceId":140006,"modelId":162620},{"sourceId":164662,"sourceType":"modelInstanceVersion","modelInstanceId":140082,"modelId":162706},{"sourceId":168128,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":143040,"modelId":165646}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Fruitoo\n## üçåüçáüçâüçêüçíüçìüçëü•ùü•≠ü´êüçä","metadata":{}},{"cell_type":"markdown","source":"Fruitoo! What a Fruit Bonanza!\n\nWelcome to the machine learning model using image classification to determine what fruit is depicted in an image!\n\n> Fruitoo is based on a dataset for fruit recognition, produced by Chris Gorgolewski located here on Kaggle: \nhttps://www.kaggle.com/datasets/chrisfilo/fruit-recognition","metadata":{}},{"cell_type":"markdown","source":"## Setting up Fruitoo\nThe setup includes importing relevant libraries.","metadata":{}},{"cell_type":"code","source":"# Python\nimport sys\n\n# Scikit-learn\nimport sklearn\n\n# Other\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport PIL\nimport os\nfrom pathlib import Path\n\n# For plotting\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# For image classification\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Sequential","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:55.750884Z","iopub.execute_input":"2024-11-15T15:33:55.751375Z","iopub.status.idle":"2024-11-15T15:33:55.761203Z","shell.execute_reply.started":"2024-11-15T15:33:55.751331Z","shell.execute_reply":"2024-11-15T15:33:55.759962Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Import and Prepare the Data\nWe start preparing the data to be used for training Fruitoo. First we define the paths of the files and make sure we can read them.","metadata":{}},{"cell_type":"code","source":"dataset = Path('/kaggle/input/fruit-classification-30-categories-refined/better_fruits')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:55.763308Z","iopub.execute_input":"2024-11-15T15:33:55.763733Z","iopub.status.idle":"2024-11-15T15:33:55.772375Z","shell.execute_reply.started":"2024-11-15T15:33:55.763675Z","shell.execute_reply":"2024-11-15T15:33:55.770813Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"image_count = len(list(os.listdir(dataset)))\nprint(image_count)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:55.774622Z","iopub.execute_input":"2024-11-15T15:33:55.775174Z","iopub.status.idle":"2024-11-15T15:33:55.790589Z","shell.execute_reply.started":"2024-11-15T15:33:55.775114Z","shell.execute_reply":"2024-11-15T15:33:55.789055Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Confirming that we are working with a lot of different fruits to classify for this model.","metadata":{}},{"cell_type":"markdown","source":"Let's take a look at a random image of bananas, just to make sure it works properly!","metadata":{}},{"cell_type":"code","source":"bananas = list(dataset.glob('banana/*'))\nPIL.Image.open(str(bananas[0]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:55.793444Z","iopub.execute_input":"2024-11-15T15:33:55.793999Z","iopub.status.idle":"2024-11-15T15:33:56.015496Z","shell.execute_reply.started":"2024-11-15T15:33:55.793935Z","shell.execute_reply":"2024-11-15T15:33:56.014187Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"And some peaches for good measure.","metadata":{}},{"cell_type":"code","source":"apricots = list(dataset.glob('apricot/*'))\nPIL.Image.open(str(apricots[0]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:56.017104Z","iopub.execute_input":"2024-11-15T15:33:56.017577Z","iopub.status.idle":"2024-11-15T15:33:56.200247Z","shell.execute_reply.started":"2024-11-15T15:33:56.017517Z","shell.execute_reply":"2024-11-15T15:33:56.198937Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"batch_size = 32\nimg_height = 180\nimg_width = 180","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:56.201823Z","iopub.execute_input":"2024-11-15T15:33:56.202236Z","iopub.status.idle":"2024-11-15T15:33:56.208635Z","shell.execute_reply.started":"2024-11-15T15:33:56.202194Z","shell.execute_reply":"2024-11-15T15:33:56.207343Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Splitting the Data ..\n.. into training and validation sets for a better outcome of Fruitoo.","metadata":{}},{"cell_type":"code","source":"train_set = tf.keras.utils.image_dataset_from_directory(\n    dataset,\n    validation_split = 0.2,\n    subset = \"training\",\n    seed = 123,\n    image_size = (img_height, img_width),\n    batch_size = batch_size)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:56.210522Z","iopub.execute_input":"2024-11-15T15:33:56.210940Z","iopub.status.idle":"2024-11-15T15:33:58.609068Z","shell.execute_reply.started":"2024-11-15T15:33:56.210899Z","shell.execute_reply":"2024-11-15T15:33:58.607428Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"validation_set = tf.keras.utils.image_dataset_from_directory(\n    dataset,\n    validation_split = 0.2,\n    subset = \"validation\",\n    seed = 123,\n    image_size = (img_height, img_width),\n    batch_size = batch_size)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:33:58.611022Z","iopub.execute_input":"2024-11-15T15:33:58.611414Z","iopub.status.idle":"2024-11-15T15:34:01.424285Z","shell.execute_reply.started":"2024-11-15T15:33:58.611373Z","shell.execute_reply":"2024-11-15T15:34:01.423085Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class_names = train_set.class_names\nprint(class_names)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:01.429061Z","iopub.execute_input":"2024-11-15T15:34:01.429567Z","iopub.status.idle":"2024-11-15T15:34:01.435728Z","shell.execute_reply.started":"2024-11-15T15:34:01.429512Z","shell.execute_reply":"2024-11-15T15:34:01.434284Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"These are the fruits we are dealing with! üçéüçåü•ùü•≠üçäüçëüçêüçÖüçà","metadata":{}},{"cell_type":"markdown","source":"## Visualize the Data\nThis is useful for assessing what we are dealing with.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize = (10, 10))\nfor images, labels in train_set.take(1):\n    for i in range (9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"))\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:01.437301Z","iopub.execute_input":"2024-11-15T15:34:01.437695Z","iopub.status.idle":"2024-11-15T15:34:02.970999Z","shell.execute_reply.started":"2024-11-15T15:34:01.437655Z","shell.execute_reply":"2024-11-15T15:34:02.969723Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for image_batch, labels_batch in train_set:\n    print(image_batch.shape)\n    print(labels_batch.shape)\n    break","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:02.972594Z","iopub.execute_input":"2024-11-15T15:34:02.973022Z","iopub.status.idle":"2024-11-15T15:34:03.056169Z","shell.execute_reply.started":"2024-11-15T15:34:02.972965Z","shell.execute_reply":"2024-11-15T15:34:03.054767Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This data is a tensor of the shape (32, 180, 180, 3), a multi-dimensional matrix, containing all the data this model will be training on!","metadata":{}},{"cell_type":"markdown","source":"## Configure the Dataset for Performance ..\n.. by caching the images in memory to make it more efficient.","metadata":{}},{"cell_type":"code","source":"AUTOTUNE = tf.data.AUTOTUNE\n\ntrain_set = train_set.cache().shuffle(1000).prefetch(buffer_size = AUTOTUNE)\nvalidation_set = validation_set.cache().prefetch(buffer_size = AUTOTUNE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:03.057944Z","iopub.execute_input":"2024-11-15T15:34:03.058485Z","iopub.status.idle":"2024-11-15T15:34:03.079582Z","shell.execute_reply.started":"2024-11-15T15:34:03.058429Z","shell.execute_reply":"2024-11-15T15:34:03.078340Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Creating the Model","metadata":{}},{"cell_type":"markdown","source":"This is a basic keras model which can be fine-tuned later as we come back to it!\n\nFor the model to be able to actually understand *anything*, we need to standardize the data to 0's and 1's as well. This is done by adding the rescaling layer to the model.","metadata":{}},{"cell_type":"code","source":"class_count = len(class_names)\n\nmodel = Sequential([\n    keras.Input(shape = (img_height, img_width, 3)),\n    layers.Rescaling(1./255),\n    layers.Conv2D(16, 3, padding = 'same', activation = 'relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(32, 3, padding = 'same', activation = 'relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(64, 3, padding = 'same', activation = 'relu'),\n    layers.MaxPooling2D(),\n    layers.Flatten(),\n    layers.Dense(128, activation = 'relu'),\n    layers.Dense(class_count)\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:03.081669Z","iopub.execute_input":"2024-11-15T15:34:03.082210Z","iopub.status.idle":"2024-11-15T15:34:03.209945Z","shell.execute_reply.started":"2024-11-15T15:34:03.082153Z","shell.execute_reply":"2024-11-15T15:34:03.208719Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Compile Fruitoo","metadata":{}},{"cell_type":"code","source":"model.compile(\n    optimizer = 'adam',\n    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits = True),\n    metrics = ['accuracy'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:03.211325Z","iopub.execute_input":"2024-11-15T15:34:03.211711Z","iopub.status.idle":"2024-11-15T15:34:03.228346Z","shell.execute_reply.started":"2024-11-15T15:34:03.211672Z","shell.execute_reply":"2024-11-15T15:34:03.227019Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:03.229563Z","iopub.execute_input":"2024-11-15T15:34:03.230116Z","iopub.status.idle":"2024-11-15T15:34:03.266200Z","shell.execute_reply.started":"2024-11-15T15:34:03.230071Z","shell.execute_reply":"2024-11-15T15:34:03.264909Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Training Fruitoo\nThis is the moment we've all been waiting for - let's gO!","metadata":{}},{"cell_type":"code","source":"epochs = 10\nhistory = model.fit(\n    train_set,\n    validation_data = validation_set,\n    epochs = epochs\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T15:34:03.267629Z","iopub.execute_input":"2024-11-15T15:34:03.268060Z","iopub.status.idle":"2024-11-15T16:51:40.692714Z","shell.execute_reply.started":"2024-11-15T15:34:03.268014Z","shell.execute_reply":"2024-11-15T16:51:40.691150Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Plot the Results of the Training and Validation Sets\nWe want to take a look at the loss function and accuracy of the training and validation sets. ","metadata":{}},{"cell_type":"code","source":"accuracy = history.history['accuracy']\nvalidation_accuracy = history.history['val_accuracy']\n\nloss = history.history['loss']\nvalidation_loss = history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize = (8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, accuracy, label = 'Training Accuracy')\nplt.plot(epochs_range, validation_accuracy, label = 'Validation Accuracy')\nplt.legend(loc = 'lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label = 'Training Loss')\nplt.plot(epochs_range, validation_loss, label = 'Validation Loss')\nplt.legend(loc = 'upper right')\nplt.title('Training and Validation Loss')\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:40.694558Z","iopub.execute_input":"2024-11-15T16:51:40.695055Z","iopub.status.idle":"2024-11-15T16:51:41.272256Z","shell.execute_reply.started":"2024-11-15T16:51:40.695002Z","shell.execute_reply":"2024-11-15T16:51:41.271176Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now we've trained our model! That only took, like, 4 hours.","metadata":{}},{"cell_type":"markdown","source":"## Saving the model\nWe make sure to save this one, given it's slow birth.","metadata":{}},{"cell_type":"code","source":"model.save('/kaggle/working/model_train1.keras')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.273835Z","iopub.execute_input":"2024-11-15T16:51:41.274234Z","iopub.status.idle":"2024-11-15T16:51:41.496432Z","shell.execute_reply.started":"2024-11-15T16:51:41.274194Z","shell.execute_reply":"2024-11-15T16:51:41.495250Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Loading the Model\nWe accidentally fell asleep while working on this model, and now we have to load our conveniently saved file for our future endevors. How lucky!","metadata":{}},{"cell_type":"markdown","source":"*The model wasn't actually persisted on Kaggle (thanks a lot), so we had to manually upload it as a ML model.*\n\n> Thank goodness we saved it! ***Locally.***\n~ AlphaBot","metadata":{}},{"cell_type":"code","source":"# trained_model = tf.keras.models.load_model('/kaggle/input/fruitoo_v3/keras/final/1/fruitoo_v3_10ep.keras')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.498315Z","iopub.execute_input":"2024-11-15T16:51:41.499049Z","iopub.status.idle":"2024-11-15T16:51:41.503583Z","shell.execute_reply.started":"2024-11-15T16:51:41.498996Z","shell.execute_reply":"2024-11-15T16:51:41.502434Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# trained_model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.505096Z","iopub.execute_input":"2024-11-15T16:51:41.505460Z","iopub.status.idle":"2024-11-15T16:51:41.515334Z","shell.execute_reply.started":"2024-11-15T16:51:41.505410Z","shell.execute_reply":"2024-11-15T16:51:41.514220Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Let's just make sure the model is still good:","metadata":{}},{"cell_type":"code","source":"# trained_loss, trained_accuracy = trained_model.evaluate(validation_set, verbose = 2)\n# print('Restored model, accuracy: {:5.2f}%'.format(100 * trained_accuracy))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.516830Z","iopub.execute_input":"2024-11-15T16:51:41.517281Z","iopub.status.idle":"2024-11-15T16:51:41.526897Z","shell.execute_reply.started":"2024-11-15T16:51:41.517241Z","shell.execute_reply":"2024-11-15T16:51:41.525799Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"When we have variables with it's history, these results can give us an indicator of the overfitting of the model.","metadata":{}},{"cell_type":"code","source":"# print(trained_accuracy - validation_accuracy)\n# print(validation_loss - trained_loss)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.528356Z","iopub.execute_input":"2024-11-15T16:51:41.528840Z","iopub.status.idle":"2024-11-15T16:51:41.539172Z","shell.execute_reply.started":"2024-11-15T16:51:41.528800Z","shell.execute_reply":"2024-11-15T16:51:41.538064Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Predicting with New Data\nLet's go! The exciting part of this adventure is about to commence. üêâ‚öîÔ∏è","metadata":{}},{"cell_type":"code","source":"banana_url = \"https://images.immediate.co.uk/production/volatile/sites/30/2017/01/Bunch-of-bananas-67e91d5.jpg\"\nbanana_path = tf.keras.utils.get_file('Banana_Bundle', origin = banana_url)\n\nimage = tf.keras.utils.load_img(banana_path, target_size = (img_height, img_width))\nimage_array = tf.keras.utils.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.540522Z","iopub.execute_input":"2024-11-15T16:51:41.541184Z","iopub.status.idle":"2024-11-15T16:51:41.642553Z","shell.execute_reply.started":"2024-11-15T16:51:41.541141Z","shell.execute_reply":"2024-11-15T16:51:41.641274Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"PIL.Image.open(banana_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.647633Z","iopub.execute_input":"2024-11-15T16:51:41.648028Z","iopub.status.idle":"2024-11-15T16:51:41.689218Z","shell.execute_reply.started":"2024-11-15T16:51:41.647989Z","shell.execute_reply":"2024-11-15T16:51:41.687969Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Doesn't that look delicious!\n\n**Now - on to the real deal.** How does Fruitoo do trying to predict this image of a banana?","metadata":{}},{"cell_type":"code","source":"predictions = model.predict(image_array)\nscore = tf.nn.softmax(predictions[0])\n\nprint (\n    \"I, the great Fruitoo, predict with a {:.2f} percent confidence that this is an image of a fruit belonging to the {} category!\"\n    .format(100 * np.max(score), class_names[np.argmax(score)])\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T16:51:41.690849Z","iopub.execute_input":"2024-11-15T16:51:41.691380Z","iopub.status.idle":"2024-11-15T16:51:41.903357Z","shell.execute_reply.started":"2024-11-15T16:51:41.691316Z","shell.execute_reply":"2024-11-15T16:51:41.902167Z"}},"outputs":[],"execution_count":null}]}